define ->
  Settings =
    flavor: "@@flavor"

    ###
    @param [String] url The url to redirect to
    ###
    redirectTo: (url)-> Settings.window.location.replace(url)

    ###
    The message to send over easyXDM.Socket and request the Analytics Session
    from the server.
    ###
    iframe_message: '@@common.iframe_message'

    ###
    Whether to use single or multiple beacons when reporting data
    @see Reporter._prepareData()
    ###
    single_beacon: @@common.single_beacon

    ###
    Timeouts
    ###
    xdomain_session_timeout: @@xdomain_session_timeout
    auto_pageview_timeout: @@auto_pageview_timeout
    send_auto_pageview: @@send_auto_pageview

    ###
    Parameter names for backend requests
    ###
    params:
      analytics_session: '@@params.analytics_session'
      signature: '@@params.signature'
      url: '@@params.url'
      referrer: '@@params.referrer'
      shop_code: '@@params.shop_code'
      actions: '@@params.actions'

    ###
    Cookies
    ###
    cookies:
      first_party_enabled: @@cookies.first_party_enabled
      version: @@cookies.version
      analytics:
        name: '@@cookies.analytics.name'
        duration: @@cookies.analytics.duration

    ###
    Backend Endpoints
    ###
    url:
      base: '@@analytics_base_url'
      application_base: '@@application_base_url'
      analytics_session:
        ###
        Analytics Tracking Session Creation Endpoint
        @param [String] shop_code Analytics code of the tracked shop
        @param [String] flavor Application name
        @param [String] metadata Additional metadata provided by the base Application
        @return [String] The formatted URL
        ###
        create: (shop_code, flavor, metadata) ->
          "@@analytics_base_url@@url.analytics_session.create"

        ###
        Analytics Tracking Session Connection Endpoint
        @return [String] The formatted URL
        ###
        connect: (shop_code)->
          "@@analytics_base_url@@url.analytics_session.connect"

      ###
      Analytics Action Endpoint
      @param [String] analytics_session The Analytics Session ID
      @return [String] The Formatted URL
      ###
      beacon: (analytics_session)->
        "@@analytics_base_url@@url.beacon"

      utils:
        # Helper endpoints to detect whether 3rd party cookies are enabled or not
        third_party_step1: -> "@@analytics_base_url@@url.utils.third_party_step1"
        third_party_step2: -> "@@analytics_base_url@@url.utils.third_party_step2"

    api:
      settings:
        key: '@@api.settings.key'
        set_account: '@@api.settings.set_account'
        set_callback: '@@api.settings.set_callback'
        redirect_to: '@@api.settings.redirect_to'
      yogurt:
        key: '@@api.yogurt.key'
        product_click: '@@api.yogurt.product_click'
      site:
        key: '@@api.site.key'
        send_pageview: '@@api.site.send_pageview'
      ecommerce:
        key: '@@api.ecommerce.key'
        add_item: '@@api.ecommerce.add_item'
        add_transaction: '@@api.ecommerce.add_transaction'

  # The current window object
  try
    Settings.window = global
  catch
    Settings.window = this

  ###
  Define window.sa and window.sa.q
  @todo Needs refactoring and better place to live
  ###
  Settings.command_queue_name = Settings.window['@@analytics_object'] || 'sa'

  Settings.window[Settings.command_queue_name] =
    Settings.window[Settings.command_queue_name] or ->
      (Settings.window[Settings.command_queue_name].q = Settings.window[Settings.command_queue_name].q || []).
        push(arguments)
      return

  Settings.window[Settings.command_queue_name].q = Settings.window[Settings.command_queue_name].q or []

  Settings.commands_queue = Settings.window[Settings.command_queue_name].q

  # The current page URL
  Settings.url.current   = Settings.window.location.href

  # The URL of the previous webpage from which a link was followed
  Settings.url.referrer = Settings.window.document.referrer

  return Settings
